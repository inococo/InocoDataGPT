-- Find customers whose increase in spending was larger on the web than
-- in stores for the year 2000, when compared to previous year

-- GPT-3.5
SELECT
  c.CUSTKEY,
  SUM(l.EXTENDEDPRICE) AS web_spending_2000,
  SUM(CASE
    WHEN YEAR(l.SHIPDATE) = 1999 THEN l.EXTENDEDPRICE
    ELSE 0
  END) AS web_spending_1999,
  SUM(o.TOTALPRICE) AS store_spending_2000,
  SUM(CASE
    WHEN YEAR(o.ORDERDATE) = 1999 THEN o.TOTALPRICE
    ELSE 0
  END) AS store_spending_1999
FROM
  LINEITEM l
  JOIN ORDERS o ON l.ORDERKEY = o.ORDERKEY
  JOIN CUSTOMER c ON o.CUSTKEY = c.CUSTKEY
WHERE
  YEAR(l.SHIPDATE) = 2000
  AND YEAR(o.ORDERDATE) = 2000
GROUP BY
  c.CUSTKEY
HAVING
  SUM(l.EXTENDEDPRICE) - SUM(CASE
    WHEN YEAR(l.SHIPDATE) = 1999 THEN l.EXTENDEDPRICE
    ELSE 0
  END) > SUM(o.TOTALPRICE) - SUM(CASE
    WHEN YEAR(o.ORDERDATE) = 1999 THEN o.TOTALPRICE
    ELSE 0
  END)

  --
  SELECT
  c.C_CUSTKEY,
  SUM(l.L_EXTENDEDPRICE) AS web_spending_2000,
  SUM(CASE
    WHEN l.L_ORDERDATE BETWEEN '1999-01-01' AND '1999-12-31' THEN l.L_EXTENDEDPRICE
    ELSE 0
  END) AS web_spending_1999,
  SUM(CASE
    WHEN o.O_ORDERDATE BETWEEN '2000-01-01' AND '2000-12-31' THEN l.L_EXTENDEDPRICE
    ELSE 0
  END) AS store_spending_2000,
  SUM(CASE
    WHEN o.O_ORDERDATE BETWEEN '1999-01-01' AND '1999-12-31' THEN l.L_EXTENDEDPRICE
    ELSE 0
  END) AS store_spending_1999
FROM
  LINEITEM l
  JOIN ORDERS o ON l.L_ORDERKEY = o.O_ORDERKEY
  JOIN CUSTOMER c ON o.O_CUSTKEY = c.C_CUSTKEY
WHERE
  o.O_ORDERDATE BETWEEN '1999-01-01' AND '2000-12-31'
GROUP BY
  c.C_CUSTKEY
HAVING
  SUM(CASE
    WHEN o.O_ORDERDATE BETWEEN '2000-01-01' AND '2000-12-31' THEN l.L_EXTENDEDPRICE
    ELSE 0
  END) >
  SUM(CASE
    WHEN o.O_ORDERDATE BETWEEN '1999-01-01' AND '1999-12-31' THEN l.L_EXTENDEDPRICE
    ELSE 0
  END)
  AND
  SUM(l.L_EXTENDEDPRICE) >
  SUM(CASE
    WHEN o.O_ORDERDATE BETWEEN '1999-01-01' AND '1999-12-31' THEN l.L_EXTENDEDPRICE
    ELSE 0
  END)

--
SELECT
  cust.C_CUSTKEY,
  cust.C_NAME,
  cust.C_PHONE,
  cust.C_ADDRESS,
  web_spending - store_spending AS spending_increase_web_vs_store
FROM
  customer AS cust
  JOIN (
    SELECT
      L_ORDERKEY,
      SUM(CASE WHEN L_SHIPDATE >= '2000-01-01' AND L_SHIPDATE <= '2000-12-31' THEN L_EXTENDEDPRICE * (1-L_DISCOUNT) ELSE 0 END) AS web_spending,
      SUM(CASE WHEN L_SHIPDATE < '2000-01-01' OR L_SHIPDATE > '2000-12-31' THEN L_EXTENDEDPRICE * (1-L_DISCOUNT) ELSE 0 END) AS store_spending
    FROM
      lineitem
      JOIN orders ON lineitem.L_ORDERKEY = orders.O_ORDERKEY
    WHERE
      orders.O_ORDERDATE >= '1999-01-01' AND orders.O_ORDERDATE <= '1999-12-31'
    GROUP BY
      L_ORDERKEY
    HAVING
      web_spending > store_spending
  ) AS spending ON cust.C_CUSTKEY = orders.O_CUSTKEY

-- GPT-4
SELECT C.CUSTKEY, C.NAME
FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER AS C
WHERE (
  SELECT SUM(L_EXTENDEDPRICE) * (1 - L_DISCOUNT)
  FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.ORDERS AS O
  JOIN SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.LINEITEM AS L ON O.O_ORDERKEY = L.L_ORDERKEY
  WHERE O.O_CUSTKEY = C.CUSTKEY
    AND EXTRACT(YEAR FROM O.O_ORDERDATE) = 2000
    AND L.L_SHIPMODE = 'WEB'
) - (
  SELECT SUM(L_EXTENDEDPRICE) * (1 - L_DISCOUNT)
  FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.ORDERS AS O
  JOIN SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.LINEITEM AS L ON O.O_ORDERKEY = L.L_ORDERKEY
  WHERE O.O_CUSTKEY = C.CUSTKEY
    AND EXTRACT(YEAR FROM O.O_ORDERDATE) = 2000
    AND L.L_SHIPMODE <> 'WEB'
) > (
  SELECT SUM(L_EXTENDEDPRICE) * (1 - L_DISCOUNT)
  FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.ORDERS AS O
  JOIN SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.LINEITEM AS L ON O.O_ORDERKEY = L.L_ORDERKEY
  WHERE O.O_CUSTKEY = C.CUSTKEY
    AND EXTRACT(YEAR FROM O.O_ORDERDATE) = 1999
    AND L.L_SHIPMODE = 'WEB'
) - (
  SELECT SUM(L_EXTENDEDPRICE) * (1 - L_DISCOUNT)
  FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.ORDERS AS O
  JOIN SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.LINEITEM AS L ON O

--
SELECT C_CUSTKEY, C_NAME
FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.CUSTOMER
WHERE C_CUSTKEY IN (
  SELECT O_CUSTKEY
  FROM SNOWFLAKE_SAMPLE_DATA.TPCH_SF1.ORDERS
  WHERE EXTRACT(YEAR, O_ORDERDATE) = 2000
  GROUP BY O_CUSTKEY
  HAVING SUM(O_TOTALPRICE) > (
    SELECT SUM(O_TOTALPRICE)
    FROM SNOWFLAKE_SAMPLE_DATA.TPCH_